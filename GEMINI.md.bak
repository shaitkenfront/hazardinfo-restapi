# Gemini コードアシスタントコンテキスト

## プロジェクト概要

### コアアーキテクチャ
- **エントリポイント**: `lambda_function.py` - REST APIとLINE Bot Webhookの両方に対応するAWS Lambdaハンドラー
- **アプリモジュール**: `/app/`ディレクトリにコアビジネスロジックモジュールが含まれています
- **デュアルインターフェース**: HTTP REST API呼び出しとLINE Messaging API Webhookの両方をサポート

### 主要モジュール
- `app/hazard_info.py` - 複数の政府API（J-SHIS、国土地理院ハザードマップ）からのコアハザードデータ取得
- `app/geocoding.py` - 住所のジオコーディングと座標系変換（WGS84 ? 東京測地系）
- `app/input_parser.py` - 住所と座標の入力検証と解析
- `app/geojsonhelper.py` - 空間データ用のGeoJSON処理ユーティリティ

### データソース統合
- **J-SHIS API** - 日本の地震確率データ地震ハザード情報ステーション
- **国土地理院ハザードマップタイル** - 国土地理院提供の浸水深、津波、土砂崩れデータ
- **Google Geocoding API** - 住所から座標への変換

## ビルドと実行

### Python 環境
- 仮想環境の作成: `python -m venv .venv`
- アクティベート (Windows): `.venv\Scripts\activate`
- アクティベート (macOS/Linux): `source .venv/bin/activate`
- 依存関係をインストール: `pip install -r requirements.txt`

### 必要な環境変数
- `LINE_CHANNEL_ACCESS_TOKEN` - LINE Messaging API アクセストークン
- `LINE_CHANNEL_SECRET` - LINE Messaging API のチャンネルシークレット
- `GOOGLE_API_KEY` - Google Geocoding API キー

### テストの実行

- `pytest` - すべてのテストを実行します
- `pytest tests/test_lambda_function.py -v` - 特定のテストファイルを詳細な出力付きで実行します
- `pytest tests/test_lambda_function.py tests/test_hazard_info.py -v` - 特定のテストファイルを複数実行します
- `python -m pytest --collect-only` - 利用可能なすべてのテストを実行せずに一覧表示します

### 座標系
本システムは、WGS84（世界標準）と東京測地系（日本ローカル）の両方の座標系に対応しており、自動変換が可能です。

### 選択的データ取得
`hazard_types` パラメータを使用すると、クライアントは特定の種類のハザード情報をリクエストできます。
- `earthquake` - 地震発生確率データ
- `flood` - 洪水浸水深
- `flood_keizoku` - 浸水継続時間
- `tsunami` - 津波浸水
- `high_tide` - 高潮浸水
- `large_fill_land` - 大規模埋め立て地
- `landslide` - 土砂崩れ危険区域

### API レスポンス構造
すべてのレスポンスには、座標、ソース情報、入力タイプ、データム、および要求されたハザードの種類が含まれています

## 開発規約

- **ソースコードを変更する場合は、自動テストを変更し、テストを実行し、README を更新する必要があります。**
- **モジュール設計**: コアアプリケーションロジックは `app` ディレクトリに分離され、機能ごとに個別のモジュール (例: `geocoding.py`、`hazard_info.py) が存在します。
- **外部データソース**: アプリケーションは、ハザード情報を取得するために外部 API に依存しています。これらの API の URL とパラメータは、`app/hazard_info.py` 内で定数として定義されています。
- **色分けされたハザードマップ**: アプリケーションは、タイル画像の色を特定のリスクの説明と重みにマッピングすることで、ハザードレベルを解釈します。これらのカラーマップは、`app/hazard_info.py` 内で辞書として定義されています。
- **テスト**: このプロジェクトでは、自動テストに `pytest` を使用しています。テストは `tests` ディレクトリに配置され、モックを使用してテスト対象コードを外部依存関係から分離します。
- **選択的な情報取得**: この API を使用すると、ユーザーは特定のハザードタイプをリクエストして、処理時間とデータ転送を削減できます。これは、`app/hazard_info.py` 内の `get_selective_hazard_info` 関数によって処理されます。
- **精度モード**: この API は、パフォーマンスチューニングのために 2 つの精度モード (`low` と `high`) を提供します。 「高精度」モードでは、周囲のエリアのより詳細な分析を実行します。